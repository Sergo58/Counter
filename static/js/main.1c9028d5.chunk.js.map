{"version":3,"sources":["Buttons.tsx","Table.tsx","Counter.tsx","Setup.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Buttons","props","className","onClick","increase","count","maxValue","isNaN","disabled","reset","startValue","Table","maxValueSetup","Counter","Setup","value","type","onChange","e","setStartValue","currentTarget","valueAsNumber","setCount","NaN","setMaxValue","setup","App","useState","setMaxValueSetup","useEffect","max","localStorage","getItem","JSON","parse","start","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAQO,SAASA,EAAQC,GACpB,OAAQ,yBAAKC,UAAW,WAChB,4BAAQC,QAASF,EAAMG,SAAUF,UAAWD,EAAMI,MAAMJ,EAAMK,SAAS,GAAGC,MAAMN,EAAMI,OAAO,kBAAkB,UAAWG,SAAUP,EAAMI,MAAMJ,EAAMK,SAAS,GAAGC,MAAMN,EAAMI,QAA9K,OACA,4BAASF,QAASF,EAAMQ,MAAOP,UAAWD,EAAMI,OAAOJ,EAAMS,YAAYH,MAAMN,EAAMI,OAAO,kBAAkB,UAAWG,SAAUP,EAAMI,OAAOJ,EAAMS,YAAYH,MAAMN,EAAMI,QAA9K,UCHL,SAASM,EAAMV,GAClB,OACI,yBAAKC,UAAWD,EAAMI,MAAMJ,EAAMW,cAAc,EAAE,YAAY,SAC3D,6BAAMX,EAAMI,OAAqB,IAAdJ,EAAMI,MAAUJ,EAAMI,MAAMJ,EAAMS,WAAW,GAAGT,EAAMS,aAAaT,EAAMK,UAAUL,EAAMS,WAAWT,EAAMK,SAAS,0BAAMJ,UAAW,SAAjB,oBAAkD,0BAAMA,UAAW,SAAjB,gCAAxL,MCMJ,SAASW,EAAQZ,GACpB,OACI,6BACI,kBAACU,EAAD,CAAOL,SAAUL,EAAMK,SAAUI,WAAYT,EAAMS,WAAaL,MAAOJ,EAAMI,MAAOO,cAAeX,EAAMW,gBACzG,kBAACZ,EAAD,CAASU,WAAYT,EAAMS,WAAaN,SAAUH,EAAMG,SAAUK,MAAOR,EAAMQ,MAAOJ,MAAOJ,EAAMI,MAAOC,SAAUL,EAAMW,iBCR/H,SAASE,EAAMb,GAalB,OACI,6BAII,6BACI,0BAAMC,UAAW,QAAjB,eADJ,IACgD,2BAAOA,UAAWD,EAAMS,WAAW,GAAGT,EAAMS,aAAaT,EAAMK,UAAUL,EAAMS,WAAWT,EAAMK,SAAS,YAAY,YAAaS,MAAOd,EAAMS,WAAYM,KAAK,SAASC,SAhBxM,SAACC,GACtBjB,EAAMkB,cAAcD,EAAEE,cAAcC,eACpCpB,EAAMqB,SAASC,QAaX,IACuP,6BACnP,0BAAMrB,UAAW,SAAjB,aAFJ,IAE+C,2BAAOA,UAAWD,EAAMS,WAAW,GAAGT,EAAMS,aAAaT,EAAMK,UAAUL,EAAMS,WAAWT,EAAMK,SAAS,YAAY,YAAaS,MAAOd,EAAMK,SAAWU,KAAK,SAASC,SAbtM,SAACC,GACtBjB,EAAMuB,YAAYN,EAAEE,cAAcC,eAClCpB,EAAMqB,SAASC,KACPL,EAAEE,cAAcC,kBAYpB,6BACI,4BAAQnB,UAAWD,EAAMI,MAAMJ,EAAMK,SAAS,GAAGL,EAAMK,SAASL,EAAMS,YAAYT,EAAMS,aAAaT,EAAMI,OAAQJ,EAAMS,WAAW,GAAGT,EAAMS,aAAaT,EAAMK,SAAS,kBAAkB,cAAeH,QAASF,EAAMwB,MAAOjB,SAAUP,EAAMI,MAAMJ,EAAMK,SAAS,GAAGL,EAAMS,aAAaT,EAAMI,OAAQJ,EAAMS,WAAW,GAAGT,EAAMS,aAAaT,EAAMK,UAAUL,EAAMS,WAAWT,EAAMK,UAAvX,SC+CDoB,MA5Ef,WAAgB,IAAD,EAGmBC,mBAAS,IAH5B,mBAGNrB,EAHM,KAGIkB,EAHJ,OAIuBG,mBAAS,GAJhC,mBAINjB,EAJM,KAIMS,EAJN,OAKaQ,mBAASjB,GALtB,mBAKNL,EALM,KAKCiB,EALD,OAM6BK,mBAASrB,GANtC,mBAMNM,EANM,KAMSgB,EANT,KAgDX,OAxCAC,qBAAU,WACN,IAAMC,EAAIC,aAAaC,QAAQ,aAAa,GACzB,kBAARF,IACPN,EAAYS,KAAKC,MAAMJ,IACvBF,EAAiBK,KAAKC,MAAMJ,KAEhC,IAAMK,EAAMJ,aAAaC,QAAQ,eAAe,GAC3B,kBAAVG,IACPhB,EAAcc,KAAKC,MAAMC,IACzBb,EAASW,KAAKC,MAAMC,OAE1B,IAGFN,qBAAU,WACdE,aAAaK,QAAQ,WAAWH,KAAKI,UAAU/B,IACvCyB,aAAaK,QAAQ,aAAaH,KAAKI,UAAU3B,MAEnD,CAACJ,EAASI,IAuBR,yBAAKR,UAAU,OACZ,kBAACW,EAAD,CACIT,SApBI,WACXkB,EAASjB,EAAQ,IAoBVI,MAlBC,WACRa,EAASjB,EAAQK,IAkBVL,MAAOA,EACPO,cAAeA,EACfF,WAAYA,EACZJ,SAAUA,IAKd,kBAACQ,EAAD,CACIU,YAAaA,EACbL,cAAeA,EACfb,SAAUA,EACVI,WAAYA,EACZe,MA5BD,WAENH,EAASjB,EAAMK,GACfkB,EAAiBhB,EAAcN,IA0BxBgB,SAAUA,EACVjB,MAAOA,EACPO,cAAeA,MChEV0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c9028d5.chunk.js","sourcesContent":["import React from \"react\";\r\ntype ButtonsType={\r\n    increase:()=>void\r\n    reset:()=>void\r\n    count:number\r\n    maxValue:number\r\n    startValue:number\r\n}\r\nexport function Buttons(props:ButtonsType) {\r\n    return (<div className={\"buttons\"}>\r\n            <button onClick={props.increase} className={props.count>props.maxValue-1||isNaN(props.count)?\"button2-disable\":\"button1\"} disabled={props.count>props.maxValue-1||isNaN(props.count)}  >inc</button>\r\n            <button  onClick={props.reset} className={props.count<=props.startValue||isNaN(props.count)?\"button2-disable\":\"button2\"} disabled={props.count<=props.startValue||isNaN(props.count)} >reset</button>\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React from \"react\";\r\ntype TableType={\r\n    count:number\r\n    maxValueSetup:number\r\n    startValue:number\r\n    maxValue:number\r\n\r\n}\r\nexport function Table(props:TableType) {\r\n    return (\r\n        <div className={props.count>props.maxValueSetup-1?\"table-red\":\"table\"}>\r\n           <div>{props.count||props.count===0?props.count:props.startValue<0||props.startValue===props.maxValue||props.startValue>props.maxValue?<span className={\"error\"}>Incorrect value!</span>:<span className={\"enter\"}>inter values and press \"set\"</span>} </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {Buttons} from \"./Buttons\";\r\nimport {Table} from \"./Table\";\r\n\r\ntype CounterType={\r\n    increase:()=>void\r\n    reset:()=>void\r\n    count:number\r\n    startValue:number\r\n    maxValueSetup:number\r\n    maxValue:number\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport function Counter(props:CounterType) {\r\n    return (\r\n        <div >\r\n            <Table maxValue={props.maxValue} startValue={props.startValue}  count={props.count} maxValueSetup={props.maxValueSetup}/>\r\n            <Buttons startValue={props.startValue}  increase={props.increase} reset={props.reset} count={props.count} maxValue={props.maxValueSetup}/>\r\n\r\n        </div>\r\n\r\n\r\n)\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype SetupType = {\r\n    startValue:number\r\n    maxValue:number\r\n    setStartValue:(e:number)=>void\r\n    setMaxValue:(e: number)=>void\r\n    setup:()=>void\r\n    setCount:(e:number)=>void\r\n    count:number\r\n    maxValueSetup:number\r\n}\r\n\r\nexport function Setup(props: SetupType) {\r\n\r\n\r\n    const onChangeHandler1 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setStartValue(e.currentTarget.valueAsNumber)\r\n        props.setCount(NaN)\r\n    }\r\n    const onChangeHandler2 = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setMaxValue(e.currentTarget.valueAsNumber)\r\n        props.setCount(NaN)\r\n        let max=e.currentTarget.valueAsNumber\r\n    }\r\n\r\n    return (\r\n        <div >\r\n\r\n\r\n\r\n            <div>\r\n                <span className={\"span\"}>Start Value</span> <input className={props.startValue<0||props.startValue===props.maxValue||props.startValue>props.maxValue?\"spanError\":\"atuin-btn\"} value={props.startValue} type=\"number\" onChange={onChangeHandler1}/> <br/>\r\n                <span className={\"span2\"}>Max Value</span> <input className={props.startValue<0||props.startValue===props.maxValue||props.startValue>props.maxValue?\"spanError\":\"atuin-btn\"} value={props.maxValue}  type=\"number\" onChange={onChangeHandler2}/>\r\n            </div>\r\n            <div>\r\n                <button className={props.count<props.maxValue+1||props.maxValue<props.startValue||props.startValue===props.count|| props.startValue<0||props.startValue===props.maxValue?\"button2-disable\":\"setupButton\"} onClick={props.setup} disabled={props.count<props.maxValue+1||props.startValue===props.count|| props.startValue<0||props.startValue===props.maxValue||props.startValue>props.maxValue} >set</button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./Counter\";\nimport {Setup} from \"./Setup\";\n\n\n\nfunction App() {\n\n\n    let [maxValue, setMaxValue] = useState(10)\n    let [startValue, setStartValue] = useState(5)\n    let [count, setCount] = useState(startValue)\n    let [maxValueSetup, setMaxValueSetup] = useState(maxValue)\n\n    useEffect(() => {\n        const max=localStorage.getItem(\"maxValue\")||[]\n        if (typeof max === \"string\") {\n            setMaxValue(JSON.parse(max))\n            setMaxValueSetup(JSON.parse(max))\n        }\n        const start=localStorage.getItem(\"startValue\")||[]\n        if (typeof start === \"string\") {\n            setStartValue(JSON.parse(start))\n            setCount(JSON.parse(start))\n        }\n    },[]);\n\n\n    useEffect(() => {\nlocalStorage.setItem(\"maxValue\",JSON.stringify(maxValue))\n        localStorage.setItem(\"startValue\",JSON.stringify(startValue))\n\n    },[maxValue,startValue]);\n\n\n\n\n    let increase = () => {\n        setCount(count + 1)\n    }\n    let reset = () => {\n        setCount(count = startValue)\n    }\n\n    let setup=()=>{\n\n        setCount(count=startValue)\n        setMaxValueSetup(maxValueSetup=maxValue)\n\n    }\n\n\n\n\n    return (\n        <div className=\"App\">\n           <Counter\n               increase={increase}\n               reset={reset}\n               count={count}\n               maxValueSetup={maxValueSetup}\n               startValue={startValue}\n               maxValue={maxValue}\n\n\n           />\n\n           <Setup\n               setMaxValue={setMaxValue}\n               setStartValue={setStartValue}\n               maxValue={maxValue}\n               startValue={startValue}\n               setup={setup}\n               setCount={setCount}\n               count={count}\n               maxValueSetup={maxValueSetup}\n\n           />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}